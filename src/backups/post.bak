{postData.content.map((item, index) => {
        const {text} = item.children[0];
        if (item.type) {
          const {type} = item;
          return <Heading key={index} type={type} content={text} />;
        }
        if (item.type === 'link') {
          const {url} = item.children;
          return (
            <HyperLink key={index} url={url}>
              {text}
            </HyperLink>
          );
        }
        return <TextParagraph key={index} content={text} />;
      })}

      if (item.children.length > 1) {
                return item.children.map((child, i) => {
                  if (child.type === 'link') {
                    return (
                      <Link key={i} href={child.url}>
                        {child.children[0].text}
                      </Link>
                    );
                  }
                  return null;
                });




                content.map(node => {
                    if (Text.isText(node)) {
                      combinedString += ` ${node.text}`;
                      return combinedString;
                    }
                    switch (node.type) {
                      case 'h1':
                      case 'h2':
                      case 'h3':
                      case 'h4':
                      case 'h5':
                      case 'h6':
                        // @ts-ignore
                        return wordCounter(node.children);
                      case 'code':
                        // @ts-ignore
                        return wordCounter(node.children);
                      case 'ol':
                        // @ts-ignore
                        return wordCounter(node.children);
                      case 'li':
                        // @ts-ignore
                        return wordCounter(node.children);
                      case 'link':
                        // @ts-ignore
                        return wordCounter(node.children);
                      default:
                        // @ts-ignore
                        return wordCounter(node.children);
                    }
                  });